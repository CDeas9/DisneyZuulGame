#BlueJ class context
comment0.params=
comment0.target=void\ setUp()
comment0.text=\n\ Sets\ up\ the\ test\ fixture.\n\n\ Called\ before\ every\ test\ case\ method.\n
comment1.params=cmd
comment1.target=java.lang.String\ getResponse(java.lang.String)
comment1.text=\n\ Issue\ a\ command\ and\ get\ the\ response.\n\ As\ a\ side\ effect,\ it\ prints\ its\ output\ on\ the\ terminal\n\ in\ the\ same\ form\ as\ a\ game\ dialog.\n\ @param\ cmd\ a\ command\ such\ as\ "help"\n\ @return\ the\ game\ output\ that\ results\ from\ the\ commmand.\n
comment10.params=
comment10.target=void\ backNegative()
comment11.params=
comment11.target=void\ items()
comment12.params=
comment12.target=void\ characters()
comment13.params=
comment13.target=void\ takeCrown()
comment14.params=
comment14.target=void\ takePack()
comment15.params=
comment15.target=void\ bringSarah()
comment16.params=
comment16.target=void\ takehat()
comment17.params=
comment17.target=void\ checkInventory()
comment18.params=
comment18.target=void\ dropPack()
comment19.params=
comment19.target=void\ drophat()
comment2.params=cmd
comment2.target=void\ testCommand(java.lang.String)
comment2.text=\n\ Execute\ a\ command.\n\ As\ a\ side\ effect,\ it\ prints\ its\ output\ on\ the\ terminal\n\ in\ the\ same\ form\ as\ a\ game\ dialog.\n\ @param\ cmd\ a\ command\ such\ as\ "go\ east"\n\ This\ test\ will\ always\ succeed\ unless\ there\ is\ an\ error\n\ in\ the\ game\ code.\n
comment20.params=
comment20.target=void\ askMickeyNeg()
comment21.params=
comment21.target=void\ askMickeyPos()
comment22.params=
comment22.target=void\ askHiro()
comment23.params=
comment23.target=void\ askRapunzel()
comment24.params=
comment24.target=void\ giveHat()
comment3.params=cmd\ reply
comment3.target=void\ testCommand(java.lang.String,\ java.lang.String)
comment3.text=\n\ Test\ whether\ a\ given\ command\ gets\ the\ expected\ response.\n\ This\ method\ only\ succeeds\ if\ the\ reply\ is\ received.\n\ As\ a\ side\ effect,\ it\ prints\ its\ output\ on\ the\ terminal\n\ in\ the\ same\ form\ as\ a\ game\ dialog.\n\ @param\ cmd\ a\ command\ such\ as\ "help"\n\ @param\ reply\ a\ portion\ of\ the\ expected\ response.\n\ It\ is\ sufficient\ to\ supply\ a\ unique\ word\ or\ phrase\ that\n\ appears\ in\ the\ output.\n
comment4.params=cmd\ reply\ match
comment4.target=void\ testCommand(java.lang.String,\ java.lang.String,\ boolean)
comment4.text=\n\ Test\ whether\ a\ given\ command\ gets\ the\ expected\ response.\n\ This\ method\ only\ succeeds\ if\ the\ reply\ is\ received.\n\ As\ a\ side\ effect,\ it\ prints\ its\ output\ on\ the\ terminal\n\ in\ the\ same\ form\ as\ a\ game\ dialog.\n\ @param\ cmd\ a\ command\ such\ as\ "help"\n\ @param\ reply\ a\ portion\ of\ the\ expected\ response.\n\ @param\ match\ true\ if\ you\ want\ the\ response\ to\ match\ the\ \n\ reply,\ false\ if\ you\ don't\n\ It\ is\ sufficient\ to\ supply\ a\ unique\ word\ or\ phrase\ that\n\ appears\ in\ the\ output.\n
comment5.params=
comment5.target=void\ start()
comment6.params=
comment6.target=void\ quit()
comment7.params=
comment7.target=void\ cannotGo()
comment8.params=
comment8.target=void\ map()
comment9.params=
comment9.target=void\ backPositive()
numComments=25
